---
import { z } from "zod";
import MailerLite from "@mailerlite/mailerlite-nodejs";

const formSchema = z.string().email({ message: "Correo inválido" });

const errors = { email: "" };
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		const email = data.get("email");
		const validation = formSchema.safeParse(email);
		if (!validation.success) {
			errors.email += validation.error.format()._errors[0];
		} else {
			const mailerlite = new MailerLite({
				api_key: import.meta.env.MAILERLITE_API_KEY,
			});
			const params = {
				email,
				groups: ["92541968067855585"],
			};
			mailerlite.subscribers
				.createOrUpdate(params)
				.then((response) => {
					console.log(response.data);
				})
				.catch((error) => {
					if (error.response) console.log(error.response.data);
				});
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}

interface Props {
	text: string;
	className?: string;
}

const { className, text } = Astro.props;
---

<div class={className}>
	<form
		method="POST"
		class="mx-auto flex max-w-2xl flex-col gap-2 md:flex-row md:gap-0"
	>
		<input
			type="email"
			name="email"
			id="email"
			placeholder="Correo electrónico"
			class="-mr-3 w-full rounded-lg px-3 py-3 bg-inherit border"
		/>
		<button
			type="submit"
			class="bg-primary text-white min-w-fit rounded-lg p-3 font-semibold"
			>{text}</button
		>
	</form>
	{
		errors.email && (
			<p class="pl-3 text-sm text-destructive font-semibold mt-2">
				{errors.email}
			</p>
		)
	}
</div>
